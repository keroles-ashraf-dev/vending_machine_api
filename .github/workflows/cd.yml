name: Continuous Deployment Workflow

on:
  push:
    branches:
      - 'main'
    paths:
      - 'src/**'
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  # Deploy the main branch to fixed staging env
  deploy_staging:
    environment: staging
    name: 'Deploy to staging'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: 'Checkout repository'

      - uses: burnett01/rsync-deployments@7.0.1
        name: 'Deploy to staging'
        with:
          switches: -avzr --delete
          path: .
          remote_path: /var/app
          remote_host: ${{ secrets.HOSTNAME }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - uses: JimCronqvist/action-ssh@master
        name: Execute SSH commmands on remote server
        with:
          hosts: '${{ secrets.REMOTE_USER }}@${{ secrets.HOSTNAME }}'
          privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
          command: |
            cd /var/app
            cp .env.example .env
            docker-compose -f docker-compose.yml -f docker-compose-prod.yml up --build

  # Deploy the main branch to production
  # 
  # This job will require the `deploy_staging` job to
  # run and complete successfully first!
  # 
  # WARNING: this job will sync all the files to the production server 
  # while removing all the files that are already in the production server!
  deploy_production:
    environment: production
    name: 'Deploy to production'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:
    - uses: actions/checkout@v4
      name: 'Checkout repository'

    - uses: burnett01/rsync-deployments@7.0.1
      name: 'Deploy to production'
      with:
        switches: -avzr --delete
        path: .
        remote_path: /var/app
        remote_host: ${{ secrets.HOSTNAME }}
        remote_user: ${{ secrets.REMOTE_USER }}
        remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - uses: JimCronqvist/action-ssh@master
      name: Execute SSH commmands on remote server
      with:
        hosts: '${{ secrets.REMOTE_USER }}@${{ secrets.HOSTNAME }}'
        privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
        command: |
          cd /var/app
          cp .env.example .env
          docker-compose -f docker-compose.yml -f docker-compose-prod.yml up --build