name: Continuous Integration Workflow

on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  # run tests
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout repository

      - name: Instal dependecies
        run: npm install

      - name: Run tests
        run: npm run test

  # code analysis using sonarQube
  sonarqube:
    name: SonarQube Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} //Sonar Token generated
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} example URL (https://sq.bswlog.co.in/)

  # deploy to staging
  deploy:
    environment: staging
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: [test, sonarqube]
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository

      - name: Checkout repository
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: src/
          remote_path: /var/app
          remote_host: ${{ secrets.HOST_NAME }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
      
      - name: Execute SSH commmands on remote server
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: '${{ secrets.REMOTE_USER }}@${{ secrets.HOST_NAME }}'
          privateKey: ${{ secrets.SSH_KEY }}
          command: |
            cd /va/app
            cp .env.example .env
            docker-compose -f docker-compose.yml -f docker-compose-prod.yml up --build